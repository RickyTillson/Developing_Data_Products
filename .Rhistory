modFit4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA4, method = "glm", family = "binomial")
predict_train4 <- predict(modFit4, trainSA4)
predict_test4 <- predict(modFit4, testSA4)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA4$chd,predict_train4)
missClass(testSA4$chd,predict_test4)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(vowel.test, vowel.train)
download.file(train_url, destfile = "training_file.csv")
download.file(test_url, destfile = "testing_file.csv")
train_data <- read.csv(file = "training_file.csv", header = TRUE)
test_data <- read.csv(file = "testing_file.csv", header = TRUE)
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(train_url, destfile = "training_file.csv")
download.file(test_url, destfile = "testing_file.csv")
train_data <- read.csv(file = "training_file.csv", header = TRUE)
test_data <- read.csv(file = "testing_file.csv", header = TRUE)
download.file(train_url, destfile = "training_file.csv", method = "curl")
download.file(test_url, destfile = "testing_file.csv", method = "curl")
train_data <- read.csv(file = "training_file.csv", header = TRUE)
test_data <- read.csv(file = "testing_file.csv", header = TRUE)
control1 <- trainControl(method = "cv", number = 10, repeats = 10, allowParallel = TRUE)
model1 <- train(classe~., data = train_data, method="rf", trControl = control1, prox=FALSE)
library(caret)
control1 <- trainControl(method = "cv", number = 10, repeats = 10, allowParallel = TRUE)
model1 <- train(classe~., data = train_data, method="rf", trControl = control1, prox=FALSE)
summary(model1$finalModel)
model1$finalModel
train_data_cleaned <- train_data[-1:7,]
train_data_cleaned <- train_data[-(1:7),]
train_data_cleaned <- train_data[,-(1:7)]
control1 <- trainControl(method = "cv", number = 3, repeats = 3, allowParallel = TRUE)
model1 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control1, prox=FALSE)
model1$finalModel
View(train_data)
View(train_data_cleaned)
?complete.case
?complete.cases
train_data_cleaned <- complete.cases(train_data_cleaned)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[complete.cases(train_data_cleaned),]
View(train_data_cleaned)
summary(train_data_cleaned)
control1 <- trainControl(method = "cv", number = 3, repeats = 3, allowParallel = TRUE)
model1 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control1, prox=FALSE)
model1$finalModel
View(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, grep("^magnet_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, grep("^accel_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, grep("^gyros_", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[complete.cases(train_data_cleaned),]
train_data_cleaned <- train_data_cleaned[, -grep("^magnet_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^accel_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^gyros_", names(train_data_cleaned))]
control1 <- trainControl(method = "cv", number = 3, repeats = 1, allowParallel = TRUE)
model1 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control1, prox=FALSE)
View(train_data_cleaned)
model1$finalModel
summary(train_data_cleaned)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[complete.cases(train_data_cleaned),]
train_data_cleaned <- train_data_cleaned[, -grep("^magnet_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^accel_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^gyros_", names(train_data_cleaned))]
control1 <- trainControl(method = "cv", number = 5, repeats = 1, allowParallel = TRUE)
model1 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control1, prox=FALSE)
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
control2 <- trainControl(method = "cv", number = 5, repeats = 1, allowParallel = TRUE)
model2 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control2, prox=FALSE)
model1$finalModel
model2$finalModel
View(test_data)
prediction1 <- predict(modFit1, test_data)
prediction1 <- predict(model1, test_data)
View(test_data)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[complete.cases(train_data_cleaned),]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stdev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total", names(train_data_cleaned))]
control3 <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model3 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control3, prox=FALSE)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stdev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stdev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stdev_", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
View(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total", names(train_data_cleaned))]
control3 <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model3 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control3, prox=FALSE)
model3$finalModel
View(train_data_cleaned)
prediction3 <- predict(model3, test_data)
summary(test_data)
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
control3 <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model3 <- train(classe~., data = train_data_cleaned, method="rf", trControl = control3, prox=FALSE)
model3$finalModel
prediction3 <- predict(model3, test_data)
?confusionMatrix
confusionMatrix(prediction3)
confusionMatrix(prediction3, test_data$classe)
confusionMatrix(prediction3, test_data)
class(prediction3)
prediction3
test_data$classe
View(test_data)
names(test_data)
names(train_data)
model3$finalModel
prediction3 <- predict(model3, test_data)
getwd()
setwd(..)
setwd("..")
setwd("/Assignment")
setwd("./Assignment")
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(1)
pml_write_files(2)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
prediction3
class(prediction3)
answers = prediction3
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
p_training <- predict(model3, train_data_cleaned)
confusionMatrix(p_training, train_data_cleaned$classe)
rm(list=ls(all=TRUE))
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(train_url, destfile = "training_file.csv", method = "curl")
download.file(test_url, destfile = "testing_file.csv", method = "curl")
train_data <- read.csv(file = "training_file.csv", header = TRUE)
test_data <- read.csv(file = "testing_file.csv", header = TRUE)
library(caret)
sed.seed(12345)
trainset <- createDataPartition(train_data$classe, p = 0.8, list = FALSE)
validation_data <- train_data[-trainset,]
train_data <- train_data[trainset,]
library(caret)
set.seed(12345)
trainset <- createDataPartition(train_data$classe, p = 0.8, list = FALSE)
validation_data <- train_data[-trainset,]
train_data <- train_data[trainset,]
summary(train_data)
train_data_cleaned <- train_data[,-(1:7)]
View(test_data)
nzvcol <- nearZeroVar(train_data_cleaned)
names(train_data_cleaned)
names(train_data_cleaned)[[nzvcol]]
nzvcol
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
nzvcol <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
nzvcol <- nearZeroVar(train_data_cleaned)
names(train_data_cleaned)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -nrzv]
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe~., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
model
confusionMatrix(model, train_data_cleaned$classe)
model
train_predict <- predict(model, training_data_cleaned)
confusionMatrix(train_predict, train_data_cleaned$classe)
train_predict <- predict(model, train_data_cleaned)
confusionMatrix(train_predict, train_data_cleaned$classe)
train_predict
train_predict <- predict(model, train_data_cleaned)
class(train_predict)
dim)train_predict)
dim(train_predict)
length(train_predict)
rm(list=ls(all=TRUE))
train_data <- read.csv(file = "training_file.csv", header = TRUE)
test_data <- read.csv(file = "testing_file.csv", header = TRUE)
library(caret)
set.seed(12345)
trainset <- createDataPartition(train_data$classe, p = 0.8, list = FALSE)
validation_data <- train_data[-trainset,]
train_data <- train_data[trainset,]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -nrzv]
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe~., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
train_predict <- predict(model, train_data_cleaned)
length(train_predict)
confusionMatrix(train_predict, train_data_cleaned$classe)
train_predict <- predict(model, train_data_cleaned)
model
train_predict <- predict(model, train_data_cleaned)
length(train_predict)
train_predict
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe ~ ., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
model
train_predict <- predict(model, train_data_cleaned)
confusionMatrix(train_predict, train_data_cleaned$classe)
View(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -nrzv]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -nrzv]
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe ~ ., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
train_data_cleaned <- train_data_cleaned[, -nrzv]
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe ~ ., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
model$finalModel
train_data_cleaned <- train_data[,-(1:7)]
train_data_cleaned <- train_data_cleaned[, -grep("^kurtosis", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^skewness_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^min_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^max_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^var_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^avg_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^stddev_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^total_", names(train_data_cleaned))]
train_data_cleaned <- train_data_cleaned[, -grep("^amplitude_", names(train_data_cleaned))]
nrzv <- nearZeroVar(train_data_cleaned)
nrzv
control <- trainControl(method = "cv", number = 3, allowParallel = TRUE)
model <- train(classe ~ ., data = train_data_cleaned, method="rf", trControl = control, prox=FALSE)
model$finalModel
train_predict <- predict(model, train_data_cleaned)
confusionMatrix(train_predict, train_data_cleaned$classe)
validation_predict <- predict(model, validation_data)
confusionMatrix(validation_predict, validation_data$classe)
?cv
?randomForest::cv
?caret::trainControl
?caret::createFolds
rm(list=ls(all=TRUE))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
mod1a <- train(y ~ ., data = vowel.train, method = "rf")
set.seed(33833)
mod1a <- train(y ~ ., data = vowel.train, method = "rf")
set.seed(33833)
mod1b <- train(y ~ ., data = vowel.train, method = "gbm")
set.seed(33833)
mod1a <- train(y ~ ., data = vowel.train, method = "rf", list = FALSE)
set.seed(33833)
mod1b <- train(y ~ ., data = vowel.train, method = "gbm", list = FALSE)
?gbm
set.seed(33833)
mod1b <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred1a <- predict(mod1a, vowel.test)
pred1b <- predict(mod1b, vowel.test)
combDF <- data.frame(pred1a, pred1b, y = vowel.train$y)
combDF <- data.frame(pred1a, pred1b, y = vowel.test$y)
comb_mod <- train(y ~ ., method = "gam", data = combDF)
comb_mod <- train(y ~ ., method = "gam", data = combDF)
comb_pred <- predict(comb_mod, combDF)
sqrt(sum((pred1a - vowel.test$y)^2))
sqrt(sum((pred1b - vowel.test$y)^2))
sqrt(sum((comb_pred1 - vowel.test$y)^2))
pred1a
pred1b
?confusionMatrix
confusionMatrix(pred1a)
confusionMatrix(pred1a, vowel.test$y)
confusionMatrix(pred1b, vowel.test$y)
confusionMatrix(comb_pred, vowel.test$y)
pred1b <- predict(mod1b, vowel.test)
confusionMatrix(pred1b, vowel.test$y)
confusionMatrix(comb_pred, vowel.test$y)
comb_mod <- train(y ~ ., method = "gam", data = combDF)
warnings()
rm(list=ls(all=TRUE))
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1a <- train(y ~ ., data = vowel.train, method = "rf", list = FALSE)
set.seed(33833)
mod1b <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred1a <- predict(mod1a, vowel.test)
pred1b <- predict(mod1b, vowel.test)
confusionMatrix(pred1a, vowel.test$y)
confusionMatrix(pred1b, vowel.test$y)
rm(list=ls(all=TRUE))
library(caret)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(64233)
mod2a <- train(diagnosis ~ ., method = "rf", data = training)
set.seed(64233)
mod2b <- train(diagnosis ~ ., method = "gbm", data = training)
set.seed(64233)
mod2a <- train(diagnosis ~ ., method = "rf", data = training, list = FALSE)
set.seed(64233)
mod2b <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
set.seed(64233)
mod2c <- train(diagnosis ~ ., method = "lda", data = training)
pred2a <- predict(mod2a, testing)
pred2b <- predict(mod2b, testing)
pred2c <- predict(mod2c, testing)
confusionMatrix(pred1a, testing$diagnosis)
confusionMatrix(pred2a, testing$diagnosis)
confusionMatrix(pred2b, testing$diagnosis)
confusionMatrix(pred2c, testing$diagnosis)
predDF <- data.frame(pred2a, pred2b, pred2c, diagnosis = testing$diagnosis)
comd_mod <- train(diagnosis ~ ., method = "rf", data = predDF)
comb_pred <- predict(comb_mod, predDF)
confusionMatrix(comb_pred, testing$diagnosis)
rm(list=ls(all=TRUE))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?lasso
?plot.enet
?lpot
?plot
library(caret)
?caret::plot.enet
mod3 <- train(CompressiveStrength ~ ., method = "lasso", data = training)
?plot.enet
plot(mod3)
plot(mod3, xvar = "penalty")
rm(list=ls(all=TRUE))
library(caret)
shiny::runApp('~/Desktop/Coursera/Module 9/Shiny')
getwd()
setwd("..")
setwd("..")
getwd()
setwd("./Module 9/Shiny")
getwd()
library(shiny)
library(slidify)
shiny::runApp()
getwd()
runDeck()
runDeck()
setwd("./mydeck")
runDeck()
setwd("..")
rm(list=ls())
library(knitr)
library(slidify)
library(shiny)
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
getwd()
runDeck()
